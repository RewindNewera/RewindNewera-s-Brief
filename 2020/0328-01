强类型的编程语言应该不仅是文字可读的，而且是概念可读的。

一些脚本语言，因为多用于系统运维，网络管理等比较强调即时性的场合，要求快速完成任务，所以会弱化概念可读性，仅保留文字可读性。这样就能通过语言确切知道做了什么，但不能知道里面究竟经历了什么，如变量提升，对象转化，嵌套复合等。

如果程序内的运行逻辑，概念不能尽最大程度地可读化，阅读代码时就会变得困难，因为知道做了什么，往往是指拿什么样的输入获得什么样的输出，而中间的过程就未知的。这对于应用来说是好事，但对开发却是坏事。这过程究竟是康庄大道，还是悬河铁索，得重新梳理一遍当中概念才知。没有概念可读性，这梳理就只能像云一样在脑海中进行。

比如，
    this.attachShadow({mode:'open'});
这当中究竟做了什么样的提升，是否稳定，是否安全······
对象的概念怎么可以被仅仅当作一个数据的包裹来处理？

这种对概念可读性的担心

就像对
    t.a({m:'o'});
文字可读性的担心
    
